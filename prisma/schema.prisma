// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  CLIENT
  EMPLOYEE
  PROSPECT
}

enum ProfileType {
  BUSINESS
  INDIVIDUAL
}

enum BusinessStructure {
  NON_PROFIT
  SINGLE_LLC
  MULTIPLE_LLC
  CORPORATION
  PARTNERSHIP
  SOLE_PROPRIETORSHIP
}

enum ServiceRequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  WIDOW
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  firstName       String
  lastName        String
  password        String?
  phone           String?
  verificationOTP String?
  isVerified      Boolean  @default(false)
  onboarding      Boolean  @default(false)
  role            UserRole @default(CLIENT)
  googleId        String?  @unique
  refreshToken    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // relations
  client   Client?
  employee Employee?
  prospect Prospect?
}

model Employee {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String
  isAdmin   Boolean  @default(false)
  position  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Prospect {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @unique
  individualProfile IndividualProfile?
  businessProfiles  BusinessProfile[]
  serviceRequests   ServiceRequest[]
}

model IndividualProfile {
  id            String         @id @default(uuid())
  ssn           String?        @unique
  dob           DateTime?
  firstName     String
  lastName      String
  address       String?
  phone         String
  email         String
  occupation    String?
  employer      String?
  maritalStatus MaritalStatus? @default(SINGLE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  client          Client           @relation(fields: [clientId], references: [id])
  clientId        String           @unique
  serviceRequests ServiceRequest[]
  dependents      Dependent[]
  spouse          Spouse[]
  contact         Contact[]
  employment      Employment[]
  finances        Finance[]
}

model BusinessProfile {
  id        String             @id @default(uuid())
  legalName String?
  dba       String?
  email     String?
  address   String?
  phone     String?
  structure BusinessStructure?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relations
  client          Client           @relation(fields: [clientId], references: [id])
  clientId        String
  serviceRequests ServiceRequest[]
}

model Dependent {
  id           String   @id @default(uuid())
  firstName    String
  lastName     String
  ssn          String?
  gender       String?
  dob          DateTime
  relationship String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  individualProfile   IndividualProfile @relation(fields: [individualProfileId], references: [id])
  individualProfileId String
}

model Spouse {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  ssn       String?
  email     String?
  phone     String?
  dob       DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  individualProfile   IndividualProfile @relation(fields: [individualProfileId], references: [id])
  individualProfileId String
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  individualProfile   IndividualProfile @relation(fields: [individualProfileId], references: [id])
  individualProfileId String
}

model Finance {
  id               String   @id @default(uuid())
  incomeType       String
  taxFillingStatus String?
  amount           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  individualProfile   IndividualProfile @relation(fields: [individualProfileId], references: [id])
  individualProfileId String
}

model Employment {
  id        String   @id @default(uuid())
  employer  String
  jobTitle  String
  type      String?
  address   String?
  email     String?
  phone     String?
  startDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  individualProfile   IndividualProfile @relation(fields: [individualProfileId], references: [id])
  individualProfileId String
}

model ServiceRequest {
  id        String               @id @default(uuid())
  name      String
  status    ServiceRequestStatus @default(PENDING)
  progress  String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  // Relations
  client              Client             @relation(fields: [clientId], references: [id])
  clientId            String
  individualProfile   IndividualProfile? @relation(fields: [individualProfileId], references: [id])
  individualProfileId String?
  businessProfile     BusinessProfile?   @relation(fields: [businessProfileId], references: [id])
  businessProfileId   String?
  documents           Document[]
}

model Document {
  id              String   @id @default(uuid())
  fileName        String
  year            String
  googleDriveId   String   @unique
  googleDrivePath String
  uploadedAt      DateTime @default(now())

  // Relations
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String
}
